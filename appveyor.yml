platform:
- x64

install:
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --profile minimal
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -V
  - cargo -V
  - curl -sSf -o C:\cygwin64\setup.exe https://cygwin.com/setup-x86_64.exe
  - C:\cygwin64\setup.exe --quiet-mode --no-shortcuts --no-startmenu --no-desktop --upgrade-also --root c:\cygwin64 --packages xorg-server-extra
  # This uses libc::mmap and thus is Unix-only
  - del x11rb\examples\shared_memory.rs
  # HACK: Create a fake "shared_memory" because it is referenced in Cargo.toml
  - copy /b x11rb\examples\simple_window.rs x11rb\examples\shared_memory.rs

build: false
test_script:
  # Build once with the 'allow-unsafe-code' feature to
  # check that this works fine. Use 'check' instead of 'build' because
  # a full build requires the libxcb library
  - cargo check --verbose --package x11rb --all-targets --features all-extensions,cursor,image

  # Also build once without any feature
  - cargo check --verbose --package x11rb --all-targets

  # We do not have libxcb and thus cannot build XCBConnection
  - cargo build --verbose --package x11rb --all-targets --features all-extensions,cursor,image
  - cargo test --verbose --package x11rb --features all-extensions,cursor,image
  - cargo doc --verbose --package x11rb --features all-extensions,cursor,image

  # Start an X11 server in the background
  - ps: $Server = Start-Process -PassThru -FilePath C:\cygwin64\bin\Xvfb.exe -ArgumentList "-listen tcp :0"
  - set "DISPLAY=127.0.0.1:0"
  - set "X11RB_EXAMPLE_TIMEOUT=1"

  # Run the examples as integration tests.
  # If you know some PowerShell programming, feel free to simplify this. This is
  # the first time I touched PowerShell and I hope not to touch it again any
  # time soon. Requirements include "must fail if the command fails".
  - ps: >-
      Get-ChildItem x11rb\examples | Where {$_.extension -eq ".rs"} | Where {$_.BaseName -ne "tutorial"} | Where {$_.BaseName -ne "shared_memory"} | Foreach-Object {
        $cmd = "cargo run --verbose --package x11rb --features all-extensions,cursor,image --example $($_.BaseName) 2>&1"
        Write-Host -ForegroundColor Yellow $cmd
        $backupErrorActionPreference = $script:ErrorActionPreference
        $script:ErrorActionPreference = "Continue"
        try
        {
          cmd /c "$cmd" | ForEach-Object { "$_" }
          if ($LASTEXITCODE -ne 0)
          {
            throw "Execution failed with exit code $LASTEXITCODE for $cmd"
          }
        }
        finally
        {
          $script:ErrorActionPreference = $backupErrorActionPreference
        }
      }

on_finish:
  - ps: Stop-Process -Id $Server.Id
