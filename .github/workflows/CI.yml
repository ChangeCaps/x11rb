name: CI

on:
  push:
  pull_request:
  schedule:
    # Midnight on the 1st of a month
    - cron: '0 0 1 * *'

env:
  CARGO_TERM_COLOR: always
  MOST_FEATURES: all-extensions cursor image tracing tracing-subscriber/env-filter
  # According to code coverage changes, sometimes $XENVIRONMENT is set and
  # sometimes not. Try to make this consistent to stabilise coverage reports.
  # Example: https://app.codecov.io/gh/psychon/x11rb/compare/726/changes
  XENVIRONMENT: this/file/does/not/exit

jobs:
  code_gen:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Clear src/protocol directories in x11rb and x11rb-protocol
      run: rm -rf x11rb/src/protocol/ x11rb-protocol/src/protocol/
    - name: Run code generator
      run: make
    - name: Check for changes
      run: if ! git diff --exit-code; then exit 1; fi

  clippy:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
       - name: Install clippy
         uses: actions-rs/toolchain@v1
         with:
           profile: minimal
           toolchain: beta
           override: true
           components: clippy
       - uses: actions-rs/clippy-check@v1
         with:
           token: ${{ secrets.GITHUB_TOKEN }}
           args: --workspace --all-targets --all-features

  clippy-rustfmt:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
       - name: Install rustfmt and clippy
         uses: actions-rs/toolchain@v1
         with:
           profile: minimal
           toolchain: stable
           override: true
           components: rustfmt, clippy

       # rustfmt
       - name: rustfmt
         run: cargo fmt --all -- --check

       # clippy
       - name: clippy x11rb without features
         run: cargo clippy -p x11rb --all-targets -- -D warnings ${{ matrix.clippy_args }}

       - name: clippy x11rb with allow-unsafe-code but without dl-libxcb
         run: cargo clippy -p x11rb --all-targets --features "allow-unsafe-code" -- -D warnings ${{ matrix.clippy_args }}

       - name: clippy x11rb with allow-unsafe-code and dl-libxcb
         run: cargo clippy -p x11rb --all-targets --features "allow-unsafe-code dl-libxcb" -- -D warnings ${{ matrix.clippy_args }}

       - name: clippy workspace with all features
         run: cargo clippy --workspace --all-targets --all-features -- -D warnings ${{ matrix.clippy_args }}

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true

    - name: Install profiling tools
      if: matrix.rust == 'nightly'
      run: rustup component add llvm-tools-preview

    - name: Install grcov
      if: matrix.rust == 'nightly'
      run: cargo install grcov

    # build
    - name: cargo build with all features
      run: cargo build --workspace --verbose --all-targets --all-features

    # build no_std
    - name: cargo build protocol with no default features
      run: cargo build --manifest-path x11rb-protocol/Cargo.toml --no-default-features --features=all-extensions

    - name: Add rustflag for instrument coverage
      if: matrix.rust == 'nightly'
      run: echo "RUSTFLAGS=-C instrument-coverage" >> $GITHUB_ENV

    # test
    - name: cargo test with all features
      run: cargo test --workspace --verbose --all-features
      env:
        LLVM_PROFILE_FILE: coverage-%m.profraw

    # doc
    - name: cargo doc with all features
      run: cargo doc --workspace --verbose --all-features

    # run examples
    - name: Prepare run examples
      run: |
          echo '#!/bin/bash
              cd $1 || exit 1
              shift
              for example in examples/*.rs; do
                  example=${example/examples\//}
                  example=${example/.rs/}
                  if [ "$example" != tutorial ] ; then
                      X11RB_EXAMPLE_TIMEOUT=1 xvfb-run -a cargo run --example "$example" "$@" || exit 1
                  fi
              done
          ' > run_examples && chmod a+x run_examples
    - name: run x11rb examples with RustConnection
      run: ./run_examples x11rb --features "$MOST_FEATURES libc"
    - name: run x11rb examples with XCBConnection
      run: ./run_examples x11rb --features "$MOST_FEATURES libc allow-unsafe-code"
    - name: run x11rb examples with XCBConnection and dl-libxcb
      run: ./run_examples x11rb --features "$MOST_FEATURES libc allow-unsafe-code dl-libxcb"
    - name: run x11rb-async examples
      run: ./run_examples x11rb-async

    # run code generator in nightly builds for coverage
    - name: Run code generator
      if: matrix.rust == 'nightly'
      run: make
      env:
        LLVM_PROFILE_FILE: coverage-%m.profraw

    - name: Prepare coverage information for upload
      if: matrix.rust == 'nightly'
      run: grcov $(find ./ -type f -name "coverage-*.profraw") -s . --binary-path ./target/debug --branch --ignore-not-existing --ignore 'tests/*' -t coveralls+ --token ? -o ./coveralls.json
    - name: Upload to codecov.io
      if: matrix.rust == 'nightly'
      uses: codecov/codecov-action@v3
      with:
        files: ./coveralls.json
        flags: tests
        verbose: true
      continue-on-error: true

  msrv-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.56.0
        override: true
          #
    # build
    - name: cargo check x11rb-protocol with all features
      run: cargo build --package x11rb-protocol --verbose --lib --all-features
    - name: cargo check x11rb with all features
      run: cargo build --package x11rb --verbose --lib --all-features

    # build no_std
    - name: cargo check protocol without default features
      run: cargo build --manifest-path x11rb-protocol/Cargo.toml --no-default-features --features=all-extensions

  big-endian-test:
    runs-on: ubuntu-latest
    env:
      CROSS_TARGET: mips64-unknown-linux-gnuabi64
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Install cross rust
      run: rustup target add "$CROSS_TARGET"
    - name: Install cross
      uses: taiki-e/install-action@cross
    - name: cargo test
      run: cross test --target "$CROSS_TARGET" --verbose --package x11rb --features "$MOST_FEATURES"

  # future-proof against issue #721
  non-linux-unix-test:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Run tests
      run: cargo test --verbose --package x11rb --features "$MOST_FEATURES"
