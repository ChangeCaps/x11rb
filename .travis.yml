language: rust
dist: bionic # x11rb needs at least libxcb 1.12
jobs:
  fast_finish: true
  include:
    # 1.40 is required to use non_exhaustive.
    - rust: 1.40.0
      env: CLIPPY_RUSTFMT=no
    - rust: stable
      env: CLIPPY_RUSTFMT=yes
    - rust: beta
      env: CLIPPY_RUSTFMT=no
    - rust: nightly
      env: CLIPPY_RUSTFMT=if_available
    - env: CROSS_TARGET=mips64-unknown-linux-gnuabi64 CLIPPY_RUSTFMT=no
      rust: stable
      services: docker
      sudo: required
      script:
        - rustup target add "$CROSS_TARGET"
        - cargo install cross --force
        # libxcb is not available, so XCBConnection is not enabled
        - cross test --target "$CROSS_TARGET" --verbose --features all-extensions
  allow_failures:
    - rust: nightly
      env: CLIPPY_RUSTFMT=if_available

addons:
  apt:
    packages:
      - xvfb

before_script:
  - export ALL_FEATURES="all-extensions allow-unsafe-code dl-libxcb cursor image"

  # Run the examples as 'integration tests'. For this, there is a special
  # timeout mode where the examples close automatically after some time.
  - |
    run_examples() {
        for example in examples/*.rs; do
            example=${example/examples\//}
            example=${example/.rs/}
            if [ "$example" != tutorial ] ; then
                X11RB_EXAMPLE_TIMEOUT=1 xvfb-run -a cargo run --example "$example" "$@" || exit 1
            fi
        done
    }

  - |
    # Run clippy unless $CLIPPY_RUSTFMT is set to "no". If it is set to
    # "if_available", then this is skipped if clippy is not available. With
    # "yes", unavailability counts as an error.
    run_clippy() {
        if [ "x$CLIPPY_RUSTFMT" != "xno" ]; then
            if [ "x$CLIPPY_RUSTFMT" = "xyes" ]; then
                rustup component add clippy || return 1
            else
                rustup component add clippy || return 0
            fi
            cargo clippy --all --all-targets --all-features -- -D warnings || return 1
        fi
    }

  - |
    # Run rustfmt unless $CLIPPY_RUSTFMT is set to "no". If it is set to
    # "if_available", then this is skipped if clippy is not available. With
    # "yes", unavailability counts as an error.
    run_rustfmt() {
        if [ "x$CLIPPY_RUSTFMT" != "xno" ]; then
            if [ "x$CLIPPY_RUSTFMT" = "xyes" ]; then
                rustup component add rustfmt || return 1
            else
                rustup component add rustfmt || return 0
            fi
            cargo fmt --all -- --check || return 1
        fi
    }

script:
  # Check the code generator. Output should be identical to the
  # committed version.
  - make
  - if ! git diff --exit-code; then exit 1; fi

  - run_clippy
  - run_rustfmt

  # Build once with just the default features, i.e. without all the extensions
  # to check that this works fine.
  - cargo check --verbose --all-targets --features "$EXTRA_FEATURES"

  - cargo build --verbose --all-targets --features "$ALL_FEATURES $EXTRA_FEATURES"
  - cargo test --verbose --features "$ALL_FEATURES $EXTRA_FEATURES"
  - cargo doc --verbose --features "$ALL_FEATURES $EXTRA_FEATURES"

  # Run the examples as 'integration tests'.
  # Enable the 'all-extensions' feature or Cargo will complain.
  # Enable the 'allow-unsafe-code' feature so XCBConnection is used.
  - run_examples --features "$ALL_FEATURES $EXTRA_FEATURES"

  - cargo build --verbose --all-targets --features "all-extensions $EXTRA_FEATURES"

  # Run the examples as 'integration tests'. This time using RustConnection.
  - run_examples --features "all-extensions libc cursor image $EXTRA_FEATURES"
